<?xml version="1.0"?>

<!-- 
A launch file for setting up control of a Husky.
-->
<launch>


  <node name="rqt_console" pkg="rqt_console" type="rqt_console" output="screen" />

<!--******************************-->
<!-- Gazebo -->
<!--******************************-->
<arg name="world_name" default="worlds/empty.world"/>
<include file="$(find gazebo_ros)/launch/empty_world.launch">
  <arg name="world_name" value="$(arg world_name)"/> <!-- world_name is wrt GAZEBO_RESOURCE_PATH environment variable -->
  <arg name="paused" value="false"/>
  <arg name="use_sim_time" value="true"/>
  <arg name="gui" value="true"/>
  <arg name="headless" value="false"/>
  <arg name="debug" value="false"/>
</include>

<!--
  The simulated Husky and all the associated nodes (control, estimation, etc.) 
  are wrapped in a namespace using a group tag.  The tf prefix is generated
  using the namespace
-->

<group ns="h1">
  <!--******************************-->
  <!-- Husky in Gazebo -->
  <!--******************************-->
  <arg name="namespace" default="h1" />
  <!-- Generate the tf_prefix from the namespace -->
  <arg name="tfpre" default="$(arg namespace)_tf" />
  <!-- Put value on the parameter server in the group's namespace -->
  <param name="tf_prefix" value="$(arg namespace)_tf" />
  <arg name="laser_enabled" default="true"/>
  <arg name="ur5_enabled" default="false"/>
  <arg name="kinect_enabled" default="false"/>
  <param name="robot_description" command="$(find xacro)/xacro.py '$(find nre_simmultihusky)/xacro/mhusky.gazebo.xacro'
					   laser_enabled:=$(arg laser_enabled)
					   ur5_enabled:=$(arg ur5_enabled)
					   kinect_enabled:=$(arg kinect_enabled)
					   nsp:=$(arg namespace)
					   tfpre:=$(arg tfpre)
					   " />
  <node name="spawn_husky_model" pkg="gazebo_ros" type="spawn_model"
	args="$(optenv ROBOT_INITIAL_POSE) -unpause -urdf -param robot_description -model mobile_base"/>

  <!-- Start the state publisher node in the namespace - uses the joint states from gazebo
       along with the URDF model (robot_description) to publish the joint positions to /tf --> 
  <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher" />
  
  <!-- Here we spawn (load and launch) two controllers which become part of Gazebo. 
       The key thing we need to do is to set the "base_frame_id" of the diff_drive_controller
       to include the tf_prefix so that our tf trees work out.   
       So, we load the default control configuration and then overwrite the base_frame_id -->
  <rosparam command="load" file="$(find husky_control)/config/control.yaml" />
  <rosparam param="husky_velocity_controller/base_frame_id" subst_value="True">$(arg tfpre)/base_link</rosparam>
  <node name="base_controller_spawner" pkg="controller_manager" type="spawner" args="husky_joint_publisher husky_velocity_controller --shutdown-timeout 3"/>
  
  <!-- Localization using imu and odometry simulated by Gazebo -->
  <node pkg="robot_localization" type="ekf_localization_node" name="ekf_localization">
    <rosparam command="load" file="$(find nre_simmultihusky)/config/localization.yaml" />
  </node>

  <!-- Twister server for rviz control-->
 <node pkg="interactive_marker_twist_server" type="marker_server" name="twist_marker_server" output="screen">
   <param name="link_name" value="$(arg tfpre)/base_link" />
 </node>

  <node pkg="twist_mux" type="twist_mux" name="twist_mux">
    <rosparam command="load" file="$(find husky_control)/config/twist_mux.yaml" />
    <remap from="cmd_vel_out" to="husky_velocity_controller/cmd_vel"/>
  </node>

</group>

<!--******************************-->
<!-- Debugging tools -->
<!--******************************-->
<!--
<node name="rviz" pkg="rviz" type="rviz" args="-d $(find husky_viz)/rviz/robot.rviz" output="screen"/>
-->

<node name="rviz" pkg="rviz" type="rviz" args="-d $(find nre_simmultihusky)/rviz/robot.rviz" output="screen"/>
<node name="rqt_topic" pkg="rqt_topic" type="rqt_topic" output="screen" />
<node name="rqt_graph" pkg="rqt_graph" type="rqt_graph" output="screen" />
<node name="rqt_tf_tree" pkg="rqt_tf_tree" type="rqt_tf_tree" output="screen" />

</launch>